// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Loading base demo works fine 1`] = `
<span
  class="t-loading t-size-m"
>
  <svg
    class="t-icon t-icon-loading"
  >
    <use
      xlink:href="#t-icon-loading"
    />
  </svg>
</span>
`;

exports[`Loading delay demo works fine 1`] = `
<!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
`;

exports[`Loading fullscreen demo works fine 1`] = `
<!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
`;

exports[`Loading indicatorFunc demo works fine 1`] = `
<!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
`;

exports[`Loading indicatorSlot demo works fine 1`] = `
<div>
  <span
    class="t-loading t-size-m"
  >
    <i
      class="t-icon t-icon-loading"
    />
  </span>
</div>
`;

exports[`Loading preventScrollThrough demo works fine 1`] = `
<span
  class="t-loading t-size-m"
>
  <svg
    class="t-icon t-icon-loading"
  >
    <use
      xlink:href="#t-icon-loading"
    />
  </svg>
</span>
`;

exports[`Loading service demo works fine 1`] = `
<!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el, _Vue) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
`;

exports[`Loading size demo works fine 1`] = `
<div
  class="loading-demo"
>
  <span>
    小
  </span>
   
  <span
    class="t-loading t-size-s"
  >
    <svg
      class="t-icon t-icon-loading"
    >
      <use
        xlink:href="#t-icon-loading"
      />
    </svg>
  </span>
   
  <span>
    中
  </span>
   
  <span
    class="t-loading t-size-m"
  >
    <svg
      class="t-icon t-icon-loading"
    >
      <use
        xlink:href="#t-icon-loading"
      />
    </svg>
  </span>
   
  <span>
    大
  </span>
   
  <span
    class="t-loading t-size-l"
  >
    <svg
      class="t-icon t-icon-loading"
    >
      <use
        xlink:href="#t-icon-loading"
      />
    </svg>
  </span>
</div>
`;

exports[`Loading text demo works fine 1`] = `
<span
  class="t-loading t-size-m t-loading-text"
>
  <svg
    class="t-icon t-icon-loading"
  >
    <use
      xlink:href="#t-icon-loading"
    />
  </svg>
  <span>
    加载中
  </span>
</span>
`;

exports[`Loading wrap demo works fine 1`] = `
<div
  class="loading-demo"
>
  <div
    class="t-loading-parent__relative"
  >
    <div>
      this is loading component
    </div>
    <div
      class="t-loading__wrapper t-loading-mask"
    >
      <span
        class="t-loading t-size-m"
      >
        <svg
          class="t-icon t-icon-loading"
        >
          <use
            xlink:href="#t-icon-loading"
          />
        </svg>
      </span>
    </div>
  </div>
</div>
`;
